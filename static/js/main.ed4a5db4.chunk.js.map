{"version":3,"sources":["components/main.js","App.js","serviceWorker.js","index.js"],"names":["Main","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","className","projectsName","map","project","i","key","href","source","target","width","height","data","url","React","Component","App","_this","state","main","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oMAiCeA,cA9Bb,SAAAA,EAAYC,GAAQ,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KACZH,0EAGJ,OACEO,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAEVP,KAAKH,MAAMW,cAAgBR,KAAKH,MAAMW,aAAaC,IAAI,SAACC,EAASC,GAC7D,OACQP,EAAAC,EAAAC,cAAA,MAAIM,IAAKD,GACHP,EAAAC,EAAAC,cAAA,+FACNF,EAAAC,EAAAC,cAAA,KAAGO,KAAMH,EAAQI,OAAQC,OAAO,UAAhC,yBAEEX,EAAAC,EAAAC,cAAA,UACMU,MAAM,MACNC,OAAO,MACPC,KAAMR,EAAQS,IACdZ,UAAU,wBAnBvBa,IAAMC,WC4EVC,cA1Eb,SAAAA,EAAYzB,GAAM,IAAA0B,EAAA,OAAAzB,OAAAC,EAAA,EAAAD,CAAAE,KAAAsB,IAChBC,EAAAzB,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAwB,GAAAnB,KAAAH,KAAMH,KACD2B,MAAQ,CACXhB,aAAc,CACE,CACEW,IAAI,uCACJL,OAAQ,wCAEV,CACEK,IAAI,uCACJL,OAAQ,wCAEV,CACEK,IAAI,+CACJL,OAAQ,gDAEV,CACEK,IAAI,yCACJL,OAAQ,0CAEV,CACEK,IAAI,4CACJL,OAAQ,6CAEV,CACEK,IAAI,mCACJL,OAAQ,oCAEV,CACEK,IAAI,oCACJL,OAAQ,qCAEV,CACEK,IAAI,oCACJL,OAAQ,qCAEV,CACEK,IAAI,sCACJL,OAAQ,uCAEV,CACEK,IAAI,uCACJL,OAAQ,wCAEV,CACEK,IAAI,sCACJL,OAAQ,uCAEV,CACEK,IAAI,GACJL,OAAQ,IAEV,CACEK,IAAI,GACJL,OAAQ,IAEV,CACEK,IAAI,GACJL,OAAQ,MA1DZS,wEAgEhB,OACEnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAACmB,EAAD,CAAMjB,aAAcR,KAAKwB,MAAMhB,wBApEvBa,aCSEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ed4a5db4.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Main extends React.Component{\n  constructor(props) {\n    super(props)\n  }\n  render(){\n      return(\n        <div>\n        <ul className=\"projects\">\n          {\n            this.props.projectsName && this.props.projectsName.map((project, i)=>{\n                return (\n                        <li key={i}>\n                              <h3>schroll donw and up to see the whole website or cklick on It to open on new tabe.</h3>\n                        <a href={project.source} target=\"_blank\">show source on Github</a>\n                        \n                          <object\n                                width=\"500\"\n                                height=\"400\"\n                                data={project.url}\n                                className=\"objects\">\n                          </object>\n                        </li>\n                      )\n              })\n          }\n          </ul>\n        </div>\n      )\n  }\n}\n\nexport default Main;\n","import React, { Component } from 'react';\nimport Main from './components/main';\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      projectsName: [\n                      {\n                        url:'https://abdulwasa.github.io/website/',\n                        source: 'https://github.com/Abdulwasa/website'\n                      },\n                      {\n                        url:'https://abdulwasa.github.io/owngame/',\n                        source: 'https://github.com/Abdulwasa/owngame'\n                      },\n                      {\n                        url:'https://abdulwasa.github.io/video.github.io/',\n                        source: 'https://github.com/Abdulwasa/video.github.io'\n                      },\n                      {\n                        url:'https://abdulwasa.github.io/githubapi/',\n                        source: 'https://github.com/Abdulwasa/githubapi'\n                      },\n                      {\n                        url:'https://abdulwasa.github.io/optimization/',\n                        source: 'https://github.com/Abdulwasa/optimization'\n                      },\n                      {\n                        url:'https://abdulwasa.github.io/map/',\n                        source: 'https://github.com/Abdulwasa/map'\n                      },\n                      {\n                        url:'https://abdulwasa.github.io/buld/',\n                        source: 'https://github.com/Abdulwasa/buld'\n                      },\n                      {\n                        url:'https://abdulwasa.github.io/dual/',\n                        source: 'https://github.com/Abdulwasa/dual'\n                      },\n                      {\n                        url:'https://abdulwasa.github.io/resume/',\n                        source: 'https://github.com/Abdulwasa/resume'\n                      },\n                      {\n                        url:'https://abdulwasa.github.io/jasmine/',\n                        source: 'https://github.com/Abdulwasa/jasmine'\n                      },\n                      {\n                        url:'https://abdulwasa.github.io/mockup/',\n                        source: 'https://github.com/Abdulwasa/mockup'\n                      },\n                      {\n                        url:'',\n                        source: ''\n                      },\n                      {\n                        url:'',\n                        source: ''\n                      },\n                      {\n                        url:'',\n                        source: ''\n                      }\n                    ]\n                  }\n                }\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <Main projectsName={this.state.projectsName}/>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}